Student 1: Antoine Hickey
Stundet 2: Enzo Chen

a) [0.1 mark] Explain, in detail, the complete Interrupt mechanism, starting from an external signal until 
completion. Differentiate clearly what part of the process is carried out by hardware components, and what 
is done by software. [Student 1] 

- Register within the I/O device that will hold whether or not the device is busy (this could be printing, reading, or doing some other task)
- When it is ready to be sent to the CPU, this signal is then sent to the CPUs internal IR (Interrupt register)
- This is a register that is checking at the end of each execute cycle, to see if there is any interrupt needed to be handled before continuing on to the next instruction.

-In reality it is a little more complicated than this, this is because firstly, the I/O device should see if there is already an interrupt queued. If this is the case, it must wait until it is able to send the signal? Also, sometimes it might wait until more than just the end of each cycle since this can give the interrupt handler (from within the vector table) permissions it is not supposed to have, including possibly modifying the kernel.

- software is in charge of handling multiple interupts

The hardware within the I/O device is used to modify the interupt register when it is busy/done
 
b) [0.1 marks] Explain, in detail, what a System Call is, give at least three examples of known system calls. 
Additionally, explain how system Calls are related to Interrupts and explain how the Interrupt hardware 
mechanism is used to implement System Calls. [Student 2] 
 
 
c) [0.1 marks] In class, we showed a simple pseudocode of an output driver for a printer. This driver 
included two generic statements:  
i. check if the printer is OK 
ii. print (LF, CR) 
Discuss in detail all the steps that the printer must carry out for each of these two items (Student 1 should 
submit answer ii., and Student 2 should submit answer i.). 
 
d) [0.4 marks] Explain briefly how the off-line operation works in batch OS. Discuss advantages and 
disadvantages of this approach. 
 
 
e) [0.4 mark] Batch Operating Systems used special cards to automate processing and to identify the jobs to 
be done. A new job started by using a special card that contained a command,  starting with $, like:

For instance, the $FORTRAN card would indicate to start executing the FORTRAN compiler and compile 
the program in the cards and generate an executable. $LOAD loads the executable, and $RUN starts the 
execution. 
 
i. [0.2 marks] Explain what would happen if a programmer wrote a driver and forgot to parse 
the “$” in the cards read. How do we prevent that error? 
 
ii. [0.2 marks] Explain what would happen if, in the middle of the execution of the program (i.e., 
after executing the program using $RUN), we have a card that has the text “$END” at the 
beginning of the card. What should the Operating System do in that case? 
 
 
f) [0.2 marks] Write examples of four privileged instructions and explain what they do and why they are 
privileged (each student should submit an answer for two instructions, separately, by the first 
deadline). 
  
g) [0.4 marks] A simple Batch OS includes the four components discussed in class: 
  
Suppose that you have to run a program whose executable is stored in a tape. The command $LOAD 
TAPE1: will activate the loader and will load the first file found in TAPE1: into main memory (the 
executable is stored in the User Area of main memory). The $RUN card will start the execution of the 
program. 
 
Explain what will happen when you have the two cards below in your deck, one after the other: 
 
$LOAD TAPE1: 

$RUN 
 
You must provide a detailed analysis of the execution sequence triggered by the two cards, clearly 
identifying the routines illustrated in the figure above. Your explanation should specify which routines are 
executed, the order in which they occur, the timing of each, and their respective functions—step by step. In 
your response, include the following: 
   
i. A clear identification and description of the routines involved, with direct reference to the figure.   
 
ii. A detailed explanation of the execution order and how the routines interact.   
 
iii. A step-by-step breakdown of what each routine performs during its execution. 
 
 
h) [0.3 marks] Consider the following program: 
 
 
 Loop 284 times { 
 x = read_card();  
 name = find_student_Last_Name (x);  // 0.5s 
 print(name, printer);  
 GPA = find_student_marks_and_average(x); // 0.4s 
 print(GPA, printer); 
} 
 
Reading a card takes 1 second, printing anything takes 1.5 seconds. When using basic timing I/O, we add 
an error of 30% for card reading and 20% for printing. Interrupt latency is 0.1 seconds. 
 
For each of the following cases: create a Gantt diagram which includes all actions described above as well 
as the times when the CPU is busy/not busy, calculate the time for one cycle and the time for entire 
program execution, and finally briefly discuss the results obtained. 

